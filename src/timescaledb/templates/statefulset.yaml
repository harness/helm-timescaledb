apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "-2"
  labels:
    app: timescaledb-single-chart
    chart: timescaledb-single-0.5.5
    release: timescaledb-single-chart
    heritage: Tiller
    cluster-name: timescaledb-single-chart
  name: timescaledb-single-chart
  namespace: {{ .Release.Namespace }}
spec:
  serviceName: timescaledb-single-chart
  replicas: {{ .Values.replicas }}
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: timescaledb-single-chart
      release: timescaledb-single-chart
  template:
    metadata:
      name: timescaledb-single-chart
      labels:
        app: timescaledb-single-chart
        release: timescaledb-single-chart
        cluster-name: timescaledb-single-chart
      annotations:
        backup.velero.io/backup-volumes: storage-volume
    spec:
      serviceAccountName: harness-default
      securityContext:
        # The postgres user inside the TimescaleDB image has uid=1000.
        # This configuration ensures the permissions of the mounts are suitable
        fsGroup: 1000
      initContainers:
      # Issuing the final checkpoints on a busy database may take considerable time.
      # Unfinished checkpoints will require more time during startup, so the tradeoff
      # here is time spent in shutdown/time spent in startup.
      # We choose shutdown here, especially as during the largest part of the shutdown
      # we can still serve clients.
      terminationGracePeriodSeconds: 600
      containers:
      - name: timescaledb
        image: {{ include "common.images.image" (dict "imageRoot" .Values.image "global" .Values.global) }}
        securityContext:
          runAsUser: 1000
        imagePullPolicy: IfNotPresent
        lifecycle:
          preStop:
            exec:
              command:
              - psql
              - -X
              - --file
              - "/etc/timescaledb/scripts/lifecycle_preStop.psql"
        # When reusing an already existing volume it sometimes happens that the permissions
        # of the PGDATA and/or wal directory are incorrect. To guard against this, we always correctly
        # set the permissons of these directories before we hand over to Patroni.
        # We also create all the tablespaces that are defined, to ensure a smooth restore/recovery on a
        # pristine set of Volumes.
        # As PostgreSQL requires to have full control over the permissions of the tablespace directories,
        # we create a subdirectory "data" in every tablespace mountpoint. The full path of every tablespace
        # therefore always ends on "/data".
        # By creating a .pgpass file in the $HOME directory, we expose the superuser password
        # to processes that may not have it in their environment (like the preStop lifecycle hook).
        # To ensure Patroni will not mingle with this file, we give Patroni its own pgpass file.
        # As these files are in the $HOME directory, they are only available to *this* container,
        # and they are ephemeral.
        command:
          - /bin/bash
          - "-c"
          - |

            install -o postgres -g postgres -d -m 0700 "/var/lib/postgresql/data" "/var/lib/postgresql/wal/pg_wal" || exit 1
            TABLESPACES=""
            for tablespace in ; do
              install -o postgres -g postgres -d -m 0700 "/var/lib/postgresql/tablespaces/${tablespace}/data"
            done

            # Environment variables can be read by regular users of PostgreSQL. Especially in a Kubernetes
            # context it is likely that some secrets are part of those variables.
            # To ensure we expose as little as possible to the underlying PostgreSQL instance, we have a list
            # of allowed environment variable patterns to retain.
            #
            # We need the KUBERNETES_ environment variables for the native Kubernetes support of Patroni to work.
            #
            # NB: Patroni will remove all PATRONI_.* environment variables before starting PostgreSQL

            # We store the current environment, as initscripts, callbacks, archive_commands etc. may require
            # to have the environment available to them
            set -o posix
            export -p > "${HOME}/.pod_environment"
            export -p | grep PGBACKREST > "${HOME}/.pgbackrest_environment"

            for UNKNOWNVAR in $(env | awk -F '=' '!/^(PATRONI_.*|HOME|PGDATA|PGHOST|LC_.*|LANG|PATH|KUBERNETES_SERVICE_.*)=/ {print $1}')
            do
                unset "${UNKNOWNVAR}"
            done

            echo "*:*:*:postgres:${PATRONI_SUPERUSER_PASSWORD}" >> ${HOME}/.pgpass
            chmod 0600 ${HOME}/.pgpass

            export PATRONI_POSTGRESQL_PGPASS="${HOME}/.pgpass.patroni"

            exec patroni /etc/timescaledb/patroni.yaml
        env:
        # We use mixed case environment variables for Patroni User management,
        # as the variable themselves are documented to be PATRONI_<username>_OPTIONS.
        # Where possible, we want to have lowercase usernames in PostgreSQL as more complex postgres usernames
        # requiring quoting to be done in certain contexts, which many tools do not do correctly, or even at all.
        # https://patroni.readthedocs.io/en/latest/ENVIRONMENT.html#bootstrap-configuration
        - name: PATRONI_admin_OPTIONS
          value: createrole,createdb
        - name: PATRONI_admin_PASSWORD
          valueFrom:
            secretKeyRef:
              name: harness-secrets
              key: "timescaledbAdminPassword"
        - name: PATRONI_postgres_PASSWORD
          valueFrom:
            secretKeyRef:
              name: harness-secrets
              key: "timescaledbPostgresPassword"
        - name: PATRONI_standby_PASSWORD
          valueFrom:
            secretKeyRef:
              name: harness-secrets
              key: "timescaledbStandbyPassword"
        - name: PATRONI_REPLICATION_PASSWORD
          valueFrom:
            secretKeyRef:
              name: harness-secrets
              key: timescaledbStandbyPassword
        - name: PATRONI_SUPERUSER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: harness-secrets
              key: timescaledbPostgresPassword
        - name: PATRONI_REPLICATION_USERNAME
          value: standby
        # To specify the PostgreSQL and Rest API connect addresses we need
        # the PATRONI_KUBERNETES_POD_IP to be available as a bash variable, so we can compose an
        # IP:PORT address later on
        - name: PATRONI_KUBERNETES_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: PATRONI_POSTGRESQL_CONNECT_ADDRESS
          value: "$(PATRONI_KUBERNETES_POD_IP):5432"
        - name: PATRONI_RESTAPI_CONNECT_ADDRESS
          value: "$(PATRONI_KUBERNETES_POD_IP):8008"
        - name: PATRONI_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: PATRONI_POSTGRESQL_DATA_DIR
          value: "/var/lib/postgresql/data"
        - name: PATRONI_KUBERNETES_NAMESPACE
          value: '{{ .Release.Namespace }}'
        - name: PATRONI_KUBERNETES_LABELS
          value: "{app: timescaledb-single-chart, cluster-name: timescaledb-single-chart, release: timescaledb-single-chart}"
        - name: PATRONI_SCOPE
          value: timescaledb-single-chart
        - name: PGBACKREST_CONFIG
          value: /etc/pgbackrest/pgbackrest.conf
        # PGDATA and PGHOST are not required to let Patroni/PostgreSQL run correctly,
        # but for interactive sessions, callbacks and PostgreSQL tools they should be correct.
        - name: PGDATA
          value: "$(PATRONI_POSTGRESQL_DATA_DIR)"
        - name: PGHOST
          value: "/var/run/postgresql"
          # pgBackRest is also called using the archive_command if the backup is enabled.
          # this script will also need access to the environment variables specified for
          # the backup. This can be removed once we do not directly invoke pgBackRest
          # from inside the TimescaleDB container anymore
        ports:
        - containerPort: 8008
        - containerPort: 5432
        readinessProbe:
          exec:
            command:
              - pg_isready
              - -h
              - /var/run/postgresql
          initialDelaySeconds: 5
          periodSeconds: 30
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        volumeMounts:
        - name: storage-volume
          mountPath: "/var/lib/postgresql"
          subPath: ""
        - mountPath: /etc/timescaledb/patroni.yaml
          subPath: patroni.yaml
          name: patroni-config
          readOnly: true
        - mountPath: /etc/timescaledb/scripts
          name: timescaledb-scripts
          readOnly: true
        - mountPath: /etc/certificate
          name: certificate
          readOnly: true
        - name: socket-directory
          mountPath: /var/run/postgresql
        - name: patroni-callbacks
          mountPath: /etc/timescaledb/callbacks
          readOnly: true
        resources:
          limits:
          {{- with .Values.resources }}
            cpu: {{ .limits.cpu | quote }}
            memory: {{ .limits.memory | quote }}
          requests:
            cpu: {{ .requests.cpu | quote }}
            memory: {{ .requests.memory | quote }}
          {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app: timescaledb-single-chart
                  release: "timescaledb-single-chart"
                  cluster-name: timescaledb-single-chart
              topologyKey: kubernetes.io/hostname
      {{- end }}
# end comment
      volumes:
      - name: socket-directory
        emptyDir: {}
      - name: patroni-config
        configMap:
          name: timescaledb-single-chart-patroni
      - name: timescaledb-scripts
        configMap:
          name: timescaledb-single-chart-scripts
          defaultMode: 488 # 0750 permissions
      - name: patroni-callbacks
        configMap:
          name: timescaledb-init
          defaultMode: 488 # 0750 permissions
      - name: certificate
        secret:
          secretName: timescaledb-single-chart-certificate
          defaultMode: 416 # 0640 permissions
  volumeClaimTemplates:
    - metadata:
        name: storage-volume
        annotations:
        labels:
          app: timescaledb-single-chart
          release: timescaledb-single-chart
          heritage: Tiller
          cluster-name: timescaledb-single-chart
          purpose: data-directory
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: {{ .Values.storage.capacity }}
        {{- if .Values.global.storageClassName }}
        storageClassName: {{ .Values.storageClassName}}
        {{- end }}
